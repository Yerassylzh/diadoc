import asyncio

from aiogram import Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.filters.callback_data import CallbackData, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db.db import db_session
from db.models import MentalHealth
from utils.base import send_message

router = Router()

class MentalStates(StatesGroup):
    ask_to_enter = State()


class MentalWellnessCallback(CallbackData, prefix="mental_wellness_level"):
    value: int


def create_inlinekeyboard(*buttons: list[tuple[str, any]]):
    builder = InlineKeyboardBuilder()
    for text, data in buttons:
        builder.button(text=text, callback_data=data)
    return builder.adjust(1).as_markup()


@router.message(Command(commands=["enter_mental_health"]))
async def handle_start(message: types.Message, state: FSMContext):
    keyboard = create_inlinekeyboard(
        ("5. üòä –°–ø–æ–∫–æ–π–Ω–æ", MentalWellnessCallback(value=5)),
        ("4. üôÇ –ù–µ–±–æ–ª—å—à–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", MentalWellnessCallback(value=4)),
        ("3. üòê –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å", MentalWellnessCallback(value=3)),
        ("2. üò£ –°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å", MentalWellnessCallback(value=2)),
        ("1. üò´ –ö—Ä–∞–π–Ω–∏–π —Å—Ç—Ä–µ—Å—Å", MentalWellnessCallback(value=1))
    )

    await message.answer(
        "–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è? (5 –±–∞–ª–ª–æ–≤)",
        reply_markup=keyboard
    )
    await state.set_state(MentalStates.ask_to_enter)


@router.callback_query(MentalWellnessCallback.filter())
async def handle_sport_enter(
    callback: CallbackQuery,
    callback_data: MentalWellnessCallback,
    state: FSMContext
):
    value = callback_data.value
    await state.update_data({"rating": value})
    await callback.message.answer(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏ –∑–∞ –¥–µ–Ω—å. –ß—Ç–æ –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ, —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ —Å—Ç—Ä–µ—Å—Å? üí≠üôÇüòî"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ üí°üíö"
    )
    await state.set_state(MentalStates.ask_to_enter)


@router.message(StateFilter(MentalStates.ask_to_enter))
async def handle_enter_note(
    message: types.Message,
    state: FSMContext
):
    note = message.text
    value = (await state.get_data())["rating"]
    user_id = message.from_user.id
    try:
        obj = MentalHealth(userId=user_id, rating=value, note=note)
        db_session.add(obj)
        db_session.commit()
        asyncio.gather(
            send_message(message, "‚úÖ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!\nüìä –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ ‚Äî –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –≥—Ä–∞—Ñ–∏–∫ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."),
            state.clear()
        )
    except BaseException as ex:
        print(ex)
        asyncio.gather(
            send_message(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –∑–∞–Ω–æ–≤–æ."),
            state.set_state(MentalStates.ask_to_enter)
        )
